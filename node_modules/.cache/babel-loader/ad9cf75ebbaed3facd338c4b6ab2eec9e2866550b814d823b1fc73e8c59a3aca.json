{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\merye\\\\Desktop\\\\react-workshop1-main\\\\src\\\\FormItems\\\\Form.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport FormItem from \"./FormItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Labels = [{\n  htmlFor: \"current-savings\",\n  text: \"Current Savings($)\"\n}, {\n  htmlFor: \"yearly-contribution\",\n  text: \"Yearly Savings($)\"\n}, {\n  htmlFor: \"expected-return\",\n  text: \"Expected Interest($)\"\n}, {\n  htmlFor: \"duration\",\n  text: \"Investment Duration (years)\"\n}];\nconst Form = () => {\n  _s();\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\n    const duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  const [userInput, setUserInput] = useState({\n    enteredCurrentSavings\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(FormItem, {\n        htmlfor: Labels[0].htmlFor,\n        text: Labels[0].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormItem, {\n        htmlfor: Labels[1].htmlFor,\n        text: Labels[1].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(FormItem, {\n        htmlfor: Labels[2].htmlFor,\n        text: Labels[2].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormItem, {\n        htmlfor: Labels[3].htmlFor,\n        text: Labels[3].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"reset\",\n        className: \"buttonAlt\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"button\",\n        onClick: calculateHandler,\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"wqsvIYbGAGxBcdWv1skL/Rd6oyw=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","FormItem","jsxDEV","_jsxDEV","Labels","htmlFor","text","Form","_s","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","setUserInput","enteredCurrentSavings","className","children","htmlfor","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/merye/Desktop/react-workshop1-main/src/FormItems/Form.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport FormItem from \"./FormItem\";\r\n\r\nconst Labels = [\r\n  {\r\n    htmlFor: \"current-savings\",\r\n    text: \"Current Savings($)\",\r\n  },\r\n  {\r\n    htmlFor: \"yearly-contribution\",\r\n    text: \"Yearly Savings($)\",\r\n  },\r\n  {\r\n    htmlFor: \"expected-return\",\r\n    text: \"Expected Interest($)\",\r\n  },\r\n  {\r\n    htmlFor: \"duration\",\r\n    text: \"Investment Duration (years)\",\r\n  },\r\n];\r\nconst Form = () => {\r\n  const calculateHandler = (userInput) => {\r\n    // Should be triggered when form is submitted\r\n    // You might not directly want to bind it to the submit event on the form though...\r\n\r\n    const yearlyData = []; // per-year results\r\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\r\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\r\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\r\n    const duration = +userInput[\"duration\"];\r\n\r\n    // The below code calculates yearly results (total savings, interest etc)\r\n    for (let i = 0; i < duration; i++) {\r\n      const yearlyInterest = currentSavings * expectedReturn;\r\n      currentSavings += yearlyInterest + yearlyContribution;\r\n      yearlyData.push({\r\n        // feel free to change the shape of the data pushed to the array!\r\n        year: i + 1,\r\n        yearlyInterest: yearlyInterest,\r\n        savingsEndOfYear: currentSavings,\r\n        yearlyContribution: yearlyContribution,\r\n      });\r\n    }\r\n\r\n    // do something with yearlyData ...\r\n  };\r\n\r\n  const [userInput,setUserInput] = useState({\r\n    enteredCurrentSavings\r\n  })\r\n\r\n  return (\r\n    <form className=\"form\">\r\n      <div className=\"input-group\">\r\n        <FormItem htmlfor={Labels[0].htmlFor} text={Labels[0].text}></FormItem>\r\n        <FormItem htmlfor={Labels[1].htmlFor} text={Labels[1].text}></FormItem>\r\n      </div>\r\n      <div className=\"input-group\">\r\n        <FormItem htmlfor={Labels[2].htmlFor} text={Labels[2].text}></FormItem>\r\n        <FormItem htmlfor={Labels[3].htmlFor} text={Labels[3].text}></FormItem>\r\n      </div>\r\n      <p className=\"actions\">\r\n        <button type=\"reset\" className=\"buttonAlt\">\r\n          Reset\r\n        </button>\r\n        <button type=\"submit\" className=\"button\" onClick={calculateHandler}>\r\n          Calculate\r\n        </button>\r\n      </p>\r\n    </form>\r\n  );\r\n};\r\nexport default Form ;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}